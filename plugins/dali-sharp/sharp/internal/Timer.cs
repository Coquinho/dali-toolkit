/** Copyright (c) 2017 Samsung Electronics Co., Ltd.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
*/
// This File has been auto-generated by SWIG and then modified using DALi Ruby Scripts
//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.10
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace Dali {

using System;
using System.Runtime.InteropServices;


public class Timer : BaseHandle {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal Timer(global::System.IntPtr cPtr, bool cMemoryOwn) : base(NDalicPINVOKE.Timer_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(Timer obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~Timer() {
    DisposeQueue.Instance.Add(this);
  }

  public override void Dispose() {
    if (!Stage.IsInstalled()) {
      DisposeQueue.Instance.Add(this);
      return;
    }

    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          NDalicPINVOKE.delete_Timer(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }



  /**
    * @brief Event arguments that passed via Tick signal
    *
    */
  public class TickEventArgs : EventArgs
  {
  }

  [UnmanagedFunctionPointer(CallingConvention.StdCall)]
  private delegate bool TickCallbackDelegate(IntPtr data);
  private DaliEventHandlerWithReturnType<object,TickEventArgs,bool> _timerTickEventHandler;
  private TickCallbackDelegate _timerTickCallbackDelegate;

  /**
    * @brief Event for Ticked signal which can be used to subscribe/unsubscribe the event handler
    * (in the type of TickEventHandler-DaliEventHandlerWithReturnType<object,TickEventArgs,bool>) 
    * provided by the user. Ticked signal is emitted after specified time interval.
    */
  public event DaliEventHandlerWithReturnType<object,TickEventArgs,bool> Tick
  {
     add
     {
        lock(this)
        {
           // Restricted to only one listener
           if (_timerTickEventHandler == null)
           {
              _timerTickEventHandler += value;

              _timerTickCallbackDelegate = new TickCallbackDelegate(OnTick);
              this.TickSignal().Connect(_timerTickCallbackDelegate);
           }
        }
     }

     remove
     {
        lock(this)
        {
           if (_timerTickEventHandler != null)
           {
              this.TickSignal().Disconnect(_timerTickCallbackDelegate);
           }

           _timerTickEventHandler -= value;
        }
     }
  }

  // Callback for Timer Tick signal
  private bool OnTick(IntPtr data)
  {
     TickEventArgs e = new TickEventArgs();

     if (_timerTickEventHandler != null)
     {
        //here we send all data to user event handlers
        return _timerTickEventHandler(this, e);
     }
     return false;
  }


  public Timer (uint milliSec) : this (NDalicPINVOKE.Timer_New(milliSec), true) {
      if (NDalicPINVOKE.SWIGPendingException.Pending) throw NDalicPINVOKE.SWIGPendingException.Retrieve();

  }
  public Timer(Timer timer) : this(NDalicPINVOKE.new_Timer__SWIG_1(Timer.getCPtr(timer)), true) {
    if (NDalicPINVOKE.SWIGPendingException.Pending) throw NDalicPINVOKE.SWIGPendingException.Retrieve();
  }

  public Timer Assign(Timer timer) {
    Timer ret = new Timer(NDalicPINVOKE.Timer_Assign(swigCPtr, Timer.getCPtr(timer)), false);
    if (NDalicPINVOKE.SWIGPendingException.Pending) throw NDalicPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Timer DownCast(BaseHandle handle) {
    Timer ret = new Timer(NDalicPINVOKE.Timer_DownCast(BaseHandle.getCPtr(handle)), true);
    if (NDalicPINVOKE.SWIGPendingException.Pending) throw NDalicPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void Start() {
    NDalicPINVOKE.Timer_Start(swigCPtr);
    if (NDalicPINVOKE.SWIGPendingException.Pending) throw NDalicPINVOKE.SWIGPendingException.Retrieve();
  }

  public void Stop() {
    NDalicPINVOKE.Timer_Stop(swigCPtr);
    if (NDalicPINVOKE.SWIGPendingException.Pending) throw NDalicPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetInterval(uint milliSec) {
    NDalicPINVOKE.Timer_SetInterval(swigCPtr, milliSec);
    if (NDalicPINVOKE.SWIGPendingException.Pending) throw NDalicPINVOKE.SWIGPendingException.Retrieve();
  }

  public uint GetInterval() {
    uint ret = NDalicPINVOKE.Timer_GetInterval(swigCPtr);
    if (NDalicPINVOKE.SWIGPendingException.Pending) throw NDalicPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool IsRunning() {
    bool ret = NDalicPINVOKE.Timer_IsRunning(swigCPtr);
    if (NDalicPINVOKE.SWIGPendingException.Pending) throw NDalicPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public TimerSignalType TickSignal() {
    TimerSignalType ret = new TimerSignalType(NDalicPINVOKE.Timer_TickSignal(swigCPtr), false);
    if (NDalicPINVOKE.SWIGPendingException.Pending) throw NDalicPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}
