/** Copyright (c) 2017 Samsung Electronics Co., Ltd.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
*/
// This File has been auto-generated by SWIG and then modified using DALi Ruby Scripts
//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.10
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace Dali {

public class FlexContainer : View {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal FlexContainer(global::System.IntPtr cPtr, bool cMemoryOwn) : base(NDalicPINVOKE.FlexContainer_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(FlexContainer obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~FlexContainer() {
    DisposeQueue.Instance.Add(this);
  }

  public override void Dispose() {
    if (!Window.IsInstalled()) {
      DisposeQueue.Instance.Add(this);
      return;
    }

    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          NDalicPINVOKE.delete_FlexContainer(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }


  public class Property
  {
    public static readonly int CONTENT_DIRECTION = NDalicPINVOKE.FlexContainer_Property_CONTENT_DIRECTION_get();
    public static readonly int FLEX_DIRECTION = NDalicPINVOKE.FlexContainer_Property_FLEX_DIRECTION_get();
    public static readonly int FLEX_WRAP = NDalicPINVOKE.FlexContainer_Property_FLEX_WRAP_get();
    public static readonly int JUSTIFY_CONTENT = NDalicPINVOKE.FlexContainer_Property_JUSTIFY_CONTENT_get();
    public static readonly int ALIGN_ITEMS = NDalicPINVOKE.FlexContainer_Property_ALIGN_ITEMS_get();
    public static readonly int ALIGN_CONTENT = NDalicPINVOKE.FlexContainer_Property_ALIGN_CONTENT_get();
  }

  public class ChildProperty 
  {
    public static readonly int FLEX = NDalicPINVOKE.FlexContainer_ChildProperty_FLEX_get();
    public static readonly int ALIGN_SELF = NDalicPINVOKE.FlexContainer_ChildProperty_ALIGN_SELF_get();
    public static readonly int FLEX_MARGIN = NDalicPINVOKE.FlexContainer_ChildProperty_FLEX_MARGIN_get();
  }

  public FlexContainer () : this (NDalicPINVOKE.FlexContainer_New(), true) {
      if (NDalicPINVOKE.SWIGPendingException.Pending) throw NDalicPINVOKE.SWIGPendingException.Retrieve();

  }

  internal new static FlexContainer DownCast(BaseHandle handle) {
    FlexContainer ret = new FlexContainer(NDalicPINVOKE.FlexContainer_DownCast(BaseHandle.getCPtr(handle)), true);
    if (NDalicPINVOKE.SWIGPendingException.Pending) throw NDalicPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public enum FlexDirectionType {
    Column,
    ColumnReverse,
    Row,
    RowReverse
  }

  public enum ContentDirectionType {
    Inherit,
    LTR,
    RTL
  }

  public enum Justification {
    JustifyFlexStart,
    JustifyCenter,
    JustifyFlexEnd,
    JustifySpaceBetween,
    JustifySpaceAround
  }

  public enum Alignment {
    AlignAuto,
    AlignFlexStart,
    AlignCenter,
    AlignFlexEnd,
    AlignStretch
  }

  public enum WrapType {
    NoWrap,
    Wrap
  }

  public int ContentDirection
  {
    get
    {
      int temp = 0;
      GetProperty( FlexContainer.Property.CONTENT_DIRECTION).Get( out temp );
      return temp;
    }
    set
    {
      SetProperty( FlexContainer.Property.CONTENT_DIRECTION, new Dali.Property.Value( value ) );
    }
  }
  public int FlexDirection
  {
    get
    {
      int temp = 0;
      GetProperty( FlexContainer.Property.FLEX_DIRECTION).Get( out temp );
      return temp;
    }
    set
    {
      SetProperty( FlexContainer.Property.FLEX_DIRECTION, new Dali.Property.Value( value ) );
    }
  }
  public int FlexWrap
  {
    get
    {
      int temp = 0;
      GetProperty( FlexContainer.Property.FLEX_WRAP).Get( out temp );
      return temp;
    }
    set
    {
      SetProperty( FlexContainer.Property.FLEX_WRAP, new Dali.Property.Value( value ) );
    }
  }
  public int JustifyContent
  {
    get
    {
      int temp = 0;
      GetProperty( FlexContainer.Property.JUSTIFY_CONTENT).Get( out temp );
      return temp;
    }
    set
    {
      SetProperty( FlexContainer.Property.JUSTIFY_CONTENT, new Dali.Property.Value( value ) );
    }
  }
  public int AlignItems
  {
    get
    {
      int temp = 0;
      GetProperty( FlexContainer.Property.ALIGN_ITEMS).Get( out temp );
      return temp;
    }
    set
    {
      SetProperty( FlexContainer.Property.ALIGN_ITEMS, new Dali.Property.Value( value ) );
    }
  }
  public int AlignContent
  {
    get
    {
      int temp = 0;
      GetProperty( FlexContainer.Property.ALIGN_CONTENT).Get( out temp );
      return temp;
    }
    set
    {
      SetProperty( FlexContainer.Property.ALIGN_CONTENT, new Dali.Property.Value( value ) );
    }
  }

}

}
