//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.9
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace Dali {

public class NDalic {
  public static uint int_to_uint(int x) {
    uint ret = NDalicPINVOKE.int_to_uint(x);
    if (NDalicPINVOKE.SWIGPendingException.Pending) throw NDalicPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Vector2 Min(Vector2 a, Vector2 b) {
    Vector2 ret = new Vector2(NDalicPINVOKE.Min__SWIG_0(Vector2.getCPtr(a), Vector2.getCPtr(b)), true);
    if (NDalicPINVOKE.SWIGPendingException.Pending) throw NDalicPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Vector2 Max(Vector2 a, Vector2 b) {
    Vector2 ret = new Vector2(NDalicPINVOKE.Max__SWIG_0(Vector2.getCPtr(a), Vector2.getCPtr(b)), true);
    if (NDalicPINVOKE.SWIGPendingException.Pending) throw NDalicPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Vector2 Clamp(Vector2 v, float min, float max) {
    Vector2 ret = new Vector2(NDalicPINVOKE.Clamp__SWIG_0(Vector2.getCPtr(v), min, max), true);
    if (NDalicPINVOKE.SWIGPendingException.Pending) throw NDalicPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Vector3 Min(Vector3 a, Vector3 b) {
    Vector3 ret = new Vector3(NDalicPINVOKE.Min__SWIG_1(Vector3.getCPtr(a), Vector3.getCPtr(b)), true);
    if (NDalicPINVOKE.SWIGPendingException.Pending) throw NDalicPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Vector3 Max(Vector3 a, Vector3 b) {
    Vector3 ret = new Vector3(NDalicPINVOKE.Max__SWIG_1(Vector3.getCPtr(a), Vector3.getCPtr(b)), true);
    if (NDalicPINVOKE.SWIGPendingException.Pending) throw NDalicPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Vector3 Clamp(Vector3 v, float min, float max) {
    Vector3 ret = new Vector3(NDalicPINVOKE.Clamp__SWIG_1(Vector3.getCPtr(v), min, max), true);
    if (NDalicPINVOKE.SWIGPendingException.Pending) throw NDalicPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Vector4 Min(Vector4 a, Vector4 b) {
    Vector4 ret = new Vector4(NDalicPINVOKE.Min__SWIG_2(Vector4.getCPtr(a), Vector4.getCPtr(b)), true);
    if (NDalicPINVOKE.SWIGPendingException.Pending) throw NDalicPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Vector4 Max(Vector4 a, Vector4 b) {
    Vector4 ret = new Vector4(NDalicPINVOKE.Max__SWIG_2(Vector4.getCPtr(a), Vector4.getCPtr(b)), true);
    if (NDalicPINVOKE.SWIGPendingException.Pending) throw NDalicPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Vector4 Clamp(Vector4 v, float min, float max) {
    Vector4 ret = new Vector4(NDalicPINVOKE.Clamp__SWIG_2(Vector4.getCPtr(v), min, max), true);
    if (NDalicPINVOKE.SWIGPendingException.Pending) throw NDalicPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Radian ANGLE_360 {
    get {
      global::System.IntPtr cPtr = NDalicPINVOKE.ANGLE_360_get();
      Radian ret = (cPtr == global::System.IntPtr.Zero) ? null : new Radian(cPtr, false);
      if (NDalicPINVOKE.SWIGPendingException.Pending) throw NDalicPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static Radian ANGLE_315 {
    get {
      global::System.IntPtr cPtr = NDalicPINVOKE.ANGLE_315_get();
      Radian ret = (cPtr == global::System.IntPtr.Zero) ? null : new Radian(cPtr, false);
      if (NDalicPINVOKE.SWIGPendingException.Pending) throw NDalicPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static Radian ANGLE_270 {
    get {
      global::System.IntPtr cPtr = NDalicPINVOKE.ANGLE_270_get();
      Radian ret = (cPtr == global::System.IntPtr.Zero) ? null : new Radian(cPtr, false);
      if (NDalicPINVOKE.SWIGPendingException.Pending) throw NDalicPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static Radian ANGLE_225 {
    get {
      global::System.IntPtr cPtr = NDalicPINVOKE.ANGLE_225_get();
      Radian ret = (cPtr == global::System.IntPtr.Zero) ? null : new Radian(cPtr, false);
      if (NDalicPINVOKE.SWIGPendingException.Pending) throw NDalicPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static Radian ANGLE_180 {
    get {
      global::System.IntPtr cPtr = NDalicPINVOKE.ANGLE_180_get();
      Radian ret = (cPtr == global::System.IntPtr.Zero) ? null : new Radian(cPtr, false);
      if (NDalicPINVOKE.SWIGPendingException.Pending) throw NDalicPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static Radian ANGLE_135 {
    get {
      global::System.IntPtr cPtr = NDalicPINVOKE.ANGLE_135_get();
      Radian ret = (cPtr == global::System.IntPtr.Zero) ? null : new Radian(cPtr, false);
      if (NDalicPINVOKE.SWIGPendingException.Pending) throw NDalicPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static Radian ANGLE_120 {
    get {
      global::System.IntPtr cPtr = NDalicPINVOKE.ANGLE_120_get();
      Radian ret = (cPtr == global::System.IntPtr.Zero) ? null : new Radian(cPtr, false);
      if (NDalicPINVOKE.SWIGPendingException.Pending) throw NDalicPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static Radian ANGLE_90 {
    get {
      global::System.IntPtr cPtr = NDalicPINVOKE.ANGLE_90_get();
      Radian ret = (cPtr == global::System.IntPtr.Zero) ? null : new Radian(cPtr, false);
      if (NDalicPINVOKE.SWIGPendingException.Pending) throw NDalicPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static Radian ANGLE_60 {
    get {
      global::System.IntPtr cPtr = NDalicPINVOKE.ANGLE_60_get();
      Radian ret = (cPtr == global::System.IntPtr.Zero) ? null : new Radian(cPtr, false);
      if (NDalicPINVOKE.SWIGPendingException.Pending) throw NDalicPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static Radian ANGLE_45 {
    get {
      global::System.IntPtr cPtr = NDalicPINVOKE.ANGLE_45_get();
      Radian ret = (cPtr == global::System.IntPtr.Zero) ? null : new Radian(cPtr, false);
      if (NDalicPINVOKE.SWIGPendingException.Pending) throw NDalicPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static Radian ANGLE_30 {
    get {
      global::System.IntPtr cPtr = NDalicPINVOKE.ANGLE_30_get();
      Radian ret = (cPtr == global::System.IntPtr.Zero) ? null : new Radian(cPtr, false);
      if (NDalicPINVOKE.SWIGPendingException.Pending) throw NDalicPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static Radian ANGLE_0 {
    get {
      global::System.IntPtr cPtr = NDalicPINVOKE.ANGLE_0_get();
      Radian ret = (cPtr == global::System.IntPtr.Zero) ? null : new Radian(cPtr, false);
      if (NDalicPINVOKE.SWIGPendingException.Pending) throw NDalicPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static bool EqualTo(Degree lhs, Degree rhs) {
    bool ret = NDalicPINVOKE.EqualTo__SWIG_5(Degree.getCPtr(lhs), Degree.getCPtr(rhs));
    if (NDalicPINVOKE.SWIGPendingException.Pending) throw NDalicPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool NotEqualTo(Degree lhs, Degree rhs) {
    bool ret = NDalicPINVOKE.NotEqualTo__SWIG_4(Degree.getCPtr(lhs), Degree.getCPtr(rhs));
    if (NDalicPINVOKE.SWIGPendingException.Pending) throw NDalicPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Degree Clamp(Degree angle, float min, float max) {
    Degree ret = new Degree(NDalicPINVOKE.Clamp__SWIG_3(Degree.getCPtr(angle), min, max), true);
    if (NDalicPINVOKE.SWIGPendingException.Pending) throw NDalicPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool EqualTo(Radian lhs, Radian rhs) {
    bool ret = NDalicPINVOKE.EqualTo__SWIG_6(Radian.getCPtr(lhs), Radian.getCPtr(rhs));
    if (NDalicPINVOKE.SWIGPendingException.Pending) throw NDalicPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool NotEqualTo(Radian lhs, Radian rhs) {
    bool ret = NDalicPINVOKE.NotEqualTo__SWIG_5(Radian.getCPtr(lhs), Radian.getCPtr(rhs));
    if (NDalicPINVOKE.SWIGPendingException.Pending) throw NDalicPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool EqualTo(Radian lhs, Degree rhs) {
    bool ret = NDalicPINVOKE.EqualTo__SWIG_7(Radian.getCPtr(lhs), Degree.getCPtr(rhs));
    if (NDalicPINVOKE.SWIGPendingException.Pending) throw NDalicPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool NotEqualTo(Radian lhs, Degree rhs) {
    bool ret = NDalicPINVOKE.NotEqualTo__SWIG_6(Radian.getCPtr(lhs), Degree.getCPtr(rhs));
    if (NDalicPINVOKE.SWIGPendingException.Pending) throw NDalicPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool EqualTo(Degree lhs, Radian rhs) {
    bool ret = NDalicPINVOKE.EqualTo__SWIG_8(Degree.getCPtr(lhs), Radian.getCPtr(rhs));
    if (NDalicPINVOKE.SWIGPendingException.Pending) throw NDalicPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool NotEqualTo(Degree lhs, Radian rhs) {
    bool ret = NDalicPINVOKE.NotEqualTo__SWIG_7(Degree.getCPtr(lhs), Radian.getCPtr(rhs));
    if (NDalicPINVOKE.SWIGPendingException.Pending) throw NDalicPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool GreaterThan(Radian lhs, Radian rhs) {
    bool ret = NDalicPINVOKE.GreaterThan__SWIG_0(Radian.getCPtr(lhs), Radian.getCPtr(rhs));
    if (NDalicPINVOKE.SWIGPendingException.Pending) throw NDalicPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool GreaterThan(Radian lhs, Degree rhs) {
    bool ret = NDalicPINVOKE.GreaterThan__SWIG_1(Radian.getCPtr(lhs), Degree.getCPtr(rhs));
    if (NDalicPINVOKE.SWIGPendingException.Pending) throw NDalicPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool GreaterThan(Degree lhs, Radian rhs) {
    bool ret = NDalicPINVOKE.GreaterThan__SWIG_2(Degree.getCPtr(lhs), Radian.getCPtr(rhs));
    if (NDalicPINVOKE.SWIGPendingException.Pending) throw NDalicPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool LessThan(Radian lhs, Radian rhs) {
    bool ret = NDalicPINVOKE.LessThan__SWIG_0(Radian.getCPtr(lhs), Radian.getCPtr(rhs));
    if (NDalicPINVOKE.SWIGPendingException.Pending) throw NDalicPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool LessThan(Radian lhs, Degree rhs) {
    bool ret = NDalicPINVOKE.LessThan__SWIG_1(Radian.getCPtr(lhs), Degree.getCPtr(rhs));
    if (NDalicPINVOKE.SWIGPendingException.Pending) throw NDalicPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool LessThan(Degree lhs, Radian rhs) {
    bool ret = NDalicPINVOKE.LessThan__SWIG_2(Degree.getCPtr(lhs), Radian.getCPtr(rhs));
    if (NDalicPINVOKE.SWIGPendingException.Pending) throw NDalicPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Radian Multiply(Radian lhs, float rhs) {
    Radian ret = new Radian(NDalicPINVOKE.Multiply(Radian.getCPtr(lhs), rhs), true);
    if (NDalicPINVOKE.SWIGPendingException.Pending) throw NDalicPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Radian Subtract(Radian arg0) {
    Radian ret = new Radian(NDalicPINVOKE.Subtract(Radian.getCPtr(arg0)), true);
    if (NDalicPINVOKE.SWIGPendingException.Pending) throw NDalicPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Radian Clamp(Radian angle, float min, float max) {
    Radian ret = new Radian(NDalicPINVOKE.Clamp__SWIG_4(Radian.getCPtr(angle), min, max), true);
    if (NDalicPINVOKE.SWIGPendingException.Pending) throw NDalicPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static float Range(float f0, float f1) {
    float ret = NDalicPINVOKE.Range(f0, f1);
    if (NDalicPINVOKE.SWIGPendingException.Pending) throw NDalicPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Vector4 Axis() {
    Vector4 ret = new Vector4(NDalicPINVOKE.Axis(), true);
    if (NDalicPINVOKE.SWIGPendingException.Pending) throw NDalicPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool EqualTo(AngleAxis lhs, AngleAxis rhs) {
    bool ret = NDalicPINVOKE.EqualTo__SWIG_9(AngleAxis.getCPtr(lhs), AngleAxis.getCPtr(rhs));
    if (NDalicPINVOKE.SWIGPendingException.Pending) throw NDalicPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static string GetName(Property.Type type) {
    string ret = NDalicPINVOKE.GetName((int)type);
    if (NDalicPINVOKE.SWIGPendingException.Pending) throw NDalicPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static BaseObject GetImplementation(BaseHandle handle) {
    BaseObject ret = new BaseObject(NDalicPINVOKE.GetImplementation(BaseHandle.getCPtr(handle)), false);
    if (NDalicPINVOKE.SWIGPendingException.Pending) throw NDalicPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool LessThan(BaseHandle lhs, BaseHandle rhs) {
    bool ret = NDalicPINVOKE.LessThan__SWIG_3(BaseHandle.getCPtr(lhs), BaseHandle.getCPtr(rhs));
    if (NDalicPINVOKE.SWIGPendingException.Pending) throw NDalicPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static PropertyCondition LessThanCondition(float arg) {
    PropertyCondition ret = new PropertyCondition(NDalicPINVOKE.LessThanCondition(arg), true);
    if (NDalicPINVOKE.SWIGPendingException.Pending) throw NDalicPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static PropertyCondition GreaterThanCondition(float arg) {
    PropertyCondition ret = new PropertyCondition(NDalicPINVOKE.GreaterThanCondition(arg), true);
    if (NDalicPINVOKE.SWIGPendingException.Pending) throw NDalicPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static PropertyCondition InsideCondition(float arg0, float arg1) {
    PropertyCondition ret = new PropertyCondition(NDalicPINVOKE.InsideCondition(arg0, arg1), true);
    if (NDalicPINVOKE.SWIGPendingException.Pending) throw NDalicPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static PropertyCondition OutsideCondition(float arg0, float arg1) {
    PropertyCondition ret = new PropertyCondition(NDalicPINVOKE.OutsideCondition(arg0, arg1), true);
    if (NDalicPINVOKE.SWIGPendingException.Pending) throw NDalicPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static PropertyCondition StepCondition(float stepAmount, float initialValue) {
    PropertyCondition ret = new PropertyCondition(NDalicPINVOKE.StepCondition__SWIG_0(stepAmount, initialValue), true);
    if (NDalicPINVOKE.SWIGPendingException.Pending) throw NDalicPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static PropertyCondition StepCondition(float stepAmount) {
    PropertyCondition ret = new PropertyCondition(NDalicPINVOKE.StepCondition__SWIG_1(stepAmount), true);
    if (NDalicPINVOKE.SWIGPendingException.Pending) throw NDalicPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static PropertyCondition VariableStepCondition(VectorFloat steps) {
    PropertyCondition ret = new PropertyCondition(NDalicPINVOKE.VariableStepCondition(VectorFloat.getCPtr(steps)), true);
    if (NDalicPINVOKE.SWIGPendingException.Pending) throw NDalicPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int WEIGHT {
    get {
      int ret = NDalicPINVOKE.WEIGHT_get();
      if (NDalicPINVOKE.SWIGPendingException.Pending) throw NDalicPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static Handle New() {
    Handle ret = new Handle(NDalicPINVOKE.New(), true);
    if (NDalicPINVOKE.SWIGPendingException.Pending) throw NDalicPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static float ParentOriginTop {
    get {
      float ret = NDalicPINVOKE.ParentOriginTop_get();
      if (NDalicPINVOKE.SWIGPendingException.Pending) throw NDalicPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static float ParentOriginBottom {
    get {
      float ret = NDalicPINVOKE.ParentOriginBottom_get();
      if (NDalicPINVOKE.SWIGPendingException.Pending) throw NDalicPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static float ParentOriginLeft {
    get {
      float ret = NDalicPINVOKE.ParentOriginLeft_get();
      if (NDalicPINVOKE.SWIGPendingException.Pending) throw NDalicPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static float ParentOriginRight {
    get {
      float ret = NDalicPINVOKE.ParentOriginRight_get();
      if (NDalicPINVOKE.SWIGPendingException.Pending) throw NDalicPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static float ParentOriginMiddle {
    get {
      float ret = NDalicPINVOKE.ParentOriginMiddle_get();
      if (NDalicPINVOKE.SWIGPendingException.Pending) throw NDalicPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static Vector3 ParentOriginTopLeft {
    get {
      global::System.IntPtr cPtr = NDalicPINVOKE.ParentOriginTopLeft_get();
      Vector3 ret = (cPtr == global::System.IntPtr.Zero) ? null : new Vector3(cPtr, false);
      if (NDalicPINVOKE.SWIGPendingException.Pending) throw NDalicPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static Vector3 ParentOriginTopCenter {
    get {
      global::System.IntPtr cPtr = NDalicPINVOKE.ParentOriginTopCenter_get();
      Vector3 ret = (cPtr == global::System.IntPtr.Zero) ? null : new Vector3(cPtr, false);
      if (NDalicPINVOKE.SWIGPendingException.Pending) throw NDalicPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static Vector3 ParentOriginTopRight {
    get {
      global::System.IntPtr cPtr = NDalicPINVOKE.ParentOriginTopRight_get();
      Vector3 ret = (cPtr == global::System.IntPtr.Zero) ? null : new Vector3(cPtr, false);
      if (NDalicPINVOKE.SWIGPendingException.Pending) throw NDalicPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static Vector3 ParentOriginCenterLeft {
    get {
      global::System.IntPtr cPtr = NDalicPINVOKE.ParentOriginCenterLeft_get();
      Vector3 ret = (cPtr == global::System.IntPtr.Zero) ? null : new Vector3(cPtr, false);
      if (NDalicPINVOKE.SWIGPendingException.Pending) throw NDalicPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static Vector3 ParentOriginCenter {
    get {
      global::System.IntPtr cPtr = NDalicPINVOKE.ParentOriginCenter_get();
      Vector3 ret = (cPtr == global::System.IntPtr.Zero) ? null : new Vector3(cPtr, false);
      if (NDalicPINVOKE.SWIGPendingException.Pending) throw NDalicPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static Vector3 ParentOriginCenterRight {
    get {
      global::System.IntPtr cPtr = NDalicPINVOKE.ParentOriginCenterRight_get();
      Vector3 ret = (cPtr == global::System.IntPtr.Zero) ? null : new Vector3(cPtr, false);
      if (NDalicPINVOKE.SWIGPendingException.Pending) throw NDalicPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static Vector3 ParentOriginBottomLeft {
    get {
      global::System.IntPtr cPtr = NDalicPINVOKE.ParentOriginBottomLeft_get();
      Vector3 ret = (cPtr == global::System.IntPtr.Zero) ? null : new Vector3(cPtr, false);
      if (NDalicPINVOKE.SWIGPendingException.Pending) throw NDalicPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static Vector3 ParentOriginBottomCenter {
    get {
      global::System.IntPtr cPtr = NDalicPINVOKE.ParentOriginBottomCenter_get();
      Vector3 ret = (cPtr == global::System.IntPtr.Zero) ? null : new Vector3(cPtr, false);
      if (NDalicPINVOKE.SWIGPendingException.Pending) throw NDalicPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static Vector3 ParentOriginBottomRight {
    get {
      global::System.IntPtr cPtr = NDalicPINVOKE.ParentOriginBottomRight_get();
      Vector3 ret = (cPtr == global::System.IntPtr.Zero) ? null : new Vector3(cPtr, false);
      if (NDalicPINVOKE.SWIGPendingException.Pending) throw NDalicPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static float AnchorPointTop {
    get {
      float ret = NDalicPINVOKE.AnchorPointTop_get();
      if (NDalicPINVOKE.SWIGPendingException.Pending) throw NDalicPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static float AnchorPointBottom {
    get {
      float ret = NDalicPINVOKE.AnchorPointBottom_get();
      if (NDalicPINVOKE.SWIGPendingException.Pending) throw NDalicPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static float AnchorPointLeft {
    get {
      float ret = NDalicPINVOKE.AnchorPointLeft_get();
      if (NDalicPINVOKE.SWIGPendingException.Pending) throw NDalicPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static float AnchorPointRight {
    get {
      float ret = NDalicPINVOKE.AnchorPointRight_get();
      if (NDalicPINVOKE.SWIGPendingException.Pending) throw NDalicPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static float AnchorPointMiddle {
    get {
      float ret = NDalicPINVOKE.AnchorPointMiddle_get();
      if (NDalicPINVOKE.SWIGPendingException.Pending) throw NDalicPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static Vector3 AnchorPointTopLeft {
    get {
      global::System.IntPtr cPtr = NDalicPINVOKE.AnchorPointTopLeft_get();
      Vector3 ret = (cPtr == global::System.IntPtr.Zero) ? null : new Vector3(cPtr, false);
      if (NDalicPINVOKE.SWIGPendingException.Pending) throw NDalicPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static Vector3 AnchorPointTopCenter {
    get {
      global::System.IntPtr cPtr = NDalicPINVOKE.AnchorPointTopCenter_get();
      Vector3 ret = (cPtr == global::System.IntPtr.Zero) ? null : new Vector3(cPtr, false);
      if (NDalicPINVOKE.SWIGPendingException.Pending) throw NDalicPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static Vector3 AnchorPointTopRight {
    get {
      global::System.IntPtr cPtr = NDalicPINVOKE.AnchorPointTopRight_get();
      Vector3 ret = (cPtr == global::System.IntPtr.Zero) ? null : new Vector3(cPtr, false);
      if (NDalicPINVOKE.SWIGPendingException.Pending) throw NDalicPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static Vector3 AnchorPointCenterLeft {
    get {
      global::System.IntPtr cPtr = NDalicPINVOKE.AnchorPointCenterLeft_get();
      Vector3 ret = (cPtr == global::System.IntPtr.Zero) ? null : new Vector3(cPtr, false);
      if (NDalicPINVOKE.SWIGPendingException.Pending) throw NDalicPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static Vector3 AnchorPointCenter {
    get {
      global::System.IntPtr cPtr = NDalicPINVOKE.AnchorPointCenter_get();
      Vector3 ret = (cPtr == global::System.IntPtr.Zero) ? null : new Vector3(cPtr, false);
      if (NDalicPINVOKE.SWIGPendingException.Pending) throw NDalicPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static Vector3 AnchorPointCenterRight {
    get {
      global::System.IntPtr cPtr = NDalicPINVOKE.AnchorPointCenterRight_get();
      Vector3 ret = (cPtr == global::System.IntPtr.Zero) ? null : new Vector3(cPtr, false);
      if (NDalicPINVOKE.SWIGPendingException.Pending) throw NDalicPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static Vector3 AnchorPointBottomLeft {
    get {
      global::System.IntPtr cPtr = NDalicPINVOKE.AnchorPointBottomLeft_get();
      Vector3 ret = (cPtr == global::System.IntPtr.Zero) ? null : new Vector3(cPtr, false);
      if (NDalicPINVOKE.SWIGPendingException.Pending) throw NDalicPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static Vector3 AnchorPointBottomCenter {
    get {
      global::System.IntPtr cPtr = NDalicPINVOKE.AnchorPointBottomCenter_get();
      Vector3 ret = (cPtr == global::System.IntPtr.Zero) ? null : new Vector3(cPtr, false);
      if (NDalicPINVOKE.SWIGPendingException.Pending) throw NDalicPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static Vector3 AnchorPointBottomRight {
    get {
      global::System.IntPtr cPtr = NDalicPINVOKE.AnchorPointBottomRight_get();
      Vector3 ret = (cPtr == global::System.IntPtr.Zero) ? null : new Vector3(cPtr, false);
      if (NDalicPINVOKE.SWIGPendingException.Pending) throw NDalicPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static Vector4 BLACK {
    get {
      global::System.IntPtr cPtr = NDalicPINVOKE.BLACK_get();
      Vector4 ret = (cPtr == global::System.IntPtr.Zero) ? null : new Vector4(cPtr, false);
      if (NDalicPINVOKE.SWIGPendingException.Pending) throw NDalicPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static Vector4 WHITE {
    get {
      global::System.IntPtr cPtr = NDalicPINVOKE.WHITE_get();
      Vector4 ret = (cPtr == global::System.IntPtr.Zero) ? null : new Vector4(cPtr, false);
      if (NDalicPINVOKE.SWIGPendingException.Pending) throw NDalicPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static Vector4 RED {
    get {
      global::System.IntPtr cPtr = NDalicPINVOKE.RED_get();
      Vector4 ret = (cPtr == global::System.IntPtr.Zero) ? null : new Vector4(cPtr, false);
      if (NDalicPINVOKE.SWIGPendingException.Pending) throw NDalicPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static Vector4 GREEN {
    get {
      global::System.IntPtr cPtr = NDalicPINVOKE.GREEN_get();
      Vector4 ret = (cPtr == global::System.IntPtr.Zero) ? null : new Vector4(cPtr, false);
      if (NDalicPINVOKE.SWIGPendingException.Pending) throw NDalicPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static Vector4 BLUE {
    get {
      global::System.IntPtr cPtr = NDalicPINVOKE.BLUE_get();
      Vector4 ret = (cPtr == global::System.IntPtr.Zero) ? null : new Vector4(cPtr, false);
      if (NDalicPINVOKE.SWIGPendingException.Pending) throw NDalicPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static Vector4 YELLOW {
    get {
      global::System.IntPtr cPtr = NDalicPINVOKE.YELLOW_get();
      Vector4 ret = (cPtr == global::System.IntPtr.Zero) ? null : new Vector4(cPtr, false);
      if (NDalicPINVOKE.SWIGPendingException.Pending) throw NDalicPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static Vector4 MAGENTA {
    get {
      global::System.IntPtr cPtr = NDalicPINVOKE.MAGENTA_get();
      Vector4 ret = (cPtr == global::System.IntPtr.Zero) ? null : new Vector4(cPtr, false);
      if (NDalicPINVOKE.SWIGPendingException.Pending) throw NDalicPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static Vector4 CYAN {
    get {
      global::System.IntPtr cPtr = NDalicPINVOKE.CYAN_get();
      Vector4 ret = (cPtr == global::System.IntPtr.Zero) ? null : new Vector4(cPtr, false);
      if (NDalicPINVOKE.SWIGPendingException.Pending) throw NDalicPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static Vector4 TRANSPARENT {
    get {
      global::System.IntPtr cPtr = NDalicPINVOKE.TRANSPARENT_get();
      Vector4 ret = (cPtr == global::System.IntPtr.Zero) ? null : new Vector4(cPtr, false);
      if (NDalicPINVOKE.SWIGPendingException.Pending) throw NDalicPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static float MACHINE_EPSILON_0 {
    get {
      float ret = NDalicPINVOKE.MACHINE_EPSILON_0_get();
      if (NDalicPINVOKE.SWIGPendingException.Pending) throw NDalicPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static float MACHINE_EPSILON_1 {
    get {
      float ret = NDalicPINVOKE.MACHINE_EPSILON_1_get();
      if (NDalicPINVOKE.SWIGPendingException.Pending) throw NDalicPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static float MACHINE_EPSILON_10 {
    get {
      float ret = NDalicPINVOKE.MACHINE_EPSILON_10_get();
      if (NDalicPINVOKE.SWIGPendingException.Pending) throw NDalicPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static float MACHINE_EPSILON_100 {
    get {
      float ret = NDalicPINVOKE.MACHINE_EPSILON_100_get();
      if (NDalicPINVOKE.SWIGPendingException.Pending) throw NDalicPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static float MACHINE_EPSILON_1000 {
    get {
      float ret = NDalicPINVOKE.MACHINE_EPSILON_1000_get();
      if (NDalicPINVOKE.SWIGPendingException.Pending) throw NDalicPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static float MACHINE_EPSILON_10000 {
    get {
      float ret = NDalicPINVOKE.MACHINE_EPSILON_10000_get();
      if (NDalicPINVOKE.SWIGPendingException.Pending) throw NDalicPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static float PI {
    get {
      float ret = NDalicPINVOKE.PI_get();
      if (NDalicPINVOKE.SWIGPendingException.Pending) throw NDalicPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static float PI_2 {
    get {
      float ret = NDalicPINVOKE.PI_2_get();
      if (NDalicPINVOKE.SWIGPendingException.Pending) throw NDalicPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static float PI_4 {
    get {
      float ret = NDalicPINVOKE.PI_4_get();
      if (NDalicPINVOKE.SWIGPendingException.Pending) throw NDalicPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static float PI_OVER_180 {
    get {
      float ret = NDalicPINVOKE.PI_OVER_180_get();
      if (NDalicPINVOKE.SWIGPendingException.Pending) throw NDalicPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static float ONE80_OVER_PI {
    get {
      float ret = NDalicPINVOKE.ONE80_OVER_PI_get();
      if (NDalicPINVOKE.SWIGPendingException.Pending) throw NDalicPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static ResizePolicyType ResizePolicyDefault {
    get {
      ResizePolicyType ret = (ResizePolicyType)NDalicPINVOKE.ResizePolicyDefault_get();
      if (NDalicPINVOKE.SWIGPendingException.Pending) throw NDalicPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static PixelFormat FIRST_VALID_PIXEL_FORMAT {
    get {
      PixelFormat ret = (PixelFormat)NDalicPINVOKE.FIRST_VALID_PIXEL_FORMAT_get();
      if (NDalicPINVOKE.SWIGPendingException.Pending) throw NDalicPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static PixelFormat LAST_VALID_PIXEL_FORMAT {
    get {
      PixelFormat ret = (PixelFormat)NDalicPINVOKE.LAST_VALID_PIXEL_FORMAT_get();
      if (NDalicPINVOKE.SWIGPendingException.Pending) throw NDalicPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static bool HasAlpha(PixelFormat pixelformat) {
    bool ret = NDalicPINVOKE.HasAlpha((int)pixelformat);
    if (NDalicPINVOKE.SWIGPendingException.Pending) throw NDalicPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static uint GetBytesPerPixel(PixelFormat pixelFormat) {
    uint ret = NDalicPINVOKE.GetBytesPerPixel((int)pixelFormat);
    if (NDalicPINVOKE.SWIGPendingException.Pending) throw NDalicPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void GetAlphaOffsetAndMask(PixelFormat pixelFormat, SWIGTYPE_p_int byteOffset, SWIGTYPE_p_int bitMask) {
    NDalicPINVOKE.GetAlphaOffsetAndMask((int)pixelFormat, SWIGTYPE_p_int.getCPtr(byteOffset), SWIGTYPE_p_int.getCPtr(bitMask));
    if (NDalicPINVOKE.SWIGPendingException.Pending) throw NDalicPINVOKE.SWIGPendingException.Retrieve();
  }

  public static uint POSITIVE_X {
    get {
      uint ret = NDalicPINVOKE.POSITIVE_X_get();
      if (NDalicPINVOKE.SWIGPendingException.Pending) throw NDalicPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static uint NEGATIVE_X {
    get {
      uint ret = NDalicPINVOKE.NEGATIVE_X_get();
      if (NDalicPINVOKE.SWIGPendingException.Pending) throw NDalicPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static uint POSITIVE_Y {
    get {
      uint ret = NDalicPINVOKE.POSITIVE_Y_get();
      if (NDalicPINVOKE.SWIGPendingException.Pending) throw NDalicPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static uint NEGATIVE_Y {
    get {
      uint ret = NDalicPINVOKE.NEGATIVE_Y_get();
      if (NDalicPINVOKE.SWIGPendingException.Pending) throw NDalicPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static uint POSITIVE_Z {
    get {
      uint ret = NDalicPINVOKE.POSITIVE_Z_get();
      if (NDalicPINVOKE.SWIGPendingException.Pending) throw NDalicPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static uint NEGATIVE_Z {
    get {
      uint ret = NDalicPINVOKE.NEGATIVE_Z_get();
      if (NDalicPINVOKE.SWIGPendingException.Pending) throw NDalicPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static void UnparentAndReset(Actor actor) {
    NDalicPINVOKE.UnparentAndReset(Actor.getCPtr(actor));
    if (NDalicPINVOKE.SWIGPendingException.Pending) throw NDalicPINVOKE.SWIGPendingException.Retrieve();
  }

  public static FittingModeType FittingModeDefault {
    get {
      FittingModeType ret = (FittingModeType)NDalicPINVOKE.FittingModeDefault_get();
      if (NDalicPINVOKE.SWIGPendingException.Pending) throw NDalicPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static SamplingModeType DEFAULT {
    get {
      SamplingModeType ret = (SamplingModeType)NDalicPINVOKE.DEFAULT_get();
      if (NDalicPINVOKE.SWIGPendingException.Pending) throw NDalicPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static ViewImpl GetImplementation(View handle) {
    ViewImpl ret = new ViewImpl(NDalicPINVOKE.GetImplementation__SWIG_0(View.getCPtr(handle)), false);
    if (NDalicPINVOKE.SWIGPendingException.Pending) throw NDalicPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool IsVertical(ControlOrientationType orientation) {
    bool ret = NDalicPINVOKE.IsVertical((int)orientation);
    if (NDalicPINVOKE.SWIGPendingException.Pending) throw NDalicPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool IsHorizontal(ControlOrientationType orientation) {
    bool ret = NDalicPINVOKE.IsHorizontal((int)orientation);
    if (NDalicPINVOKE.SWIGPendingException.Pending) throw NDalicPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static SWIGTYPE_p_Dali__IntrusivePtrT_Dali__Toolkit__ItemLayout_t NewItemLayout(DefaultItemLayoutType type) {
    SWIGTYPE_p_Dali__IntrusivePtrT_Dali__Toolkit__ItemLayout_t ret = new SWIGTYPE_p_Dali__IntrusivePtrT_Dali__Toolkit__ItemLayout_t(NDalicPINVOKE.NewItemLayout((int)type), true);
    if (NDalicPINVOKE.SWIGPendingException.Pending) throw NDalicPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void MoveActorConstraint(Vector3 current, SWIGTYPE_p_PropertyInputContainer inputs) {
    NDalicPINVOKE.MoveActorConstraint(Vector3.getCPtr(current), SWIGTYPE_p_PropertyInputContainer.getCPtr(inputs));
    if (NDalicPINVOKE.SWIGPendingException.Pending) throw NDalicPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void WrapActorConstraint(Vector3 position, SWIGTYPE_p_PropertyInputContainer inputs) {
    NDalicPINVOKE.WrapActorConstraint(Vector3.getCPtr(position), SWIGTYPE_p_PropertyInputContainer.getCPtr(inputs));
    if (NDalicPINVOKE.SWIGPendingException.Pending) throw NDalicPINVOKE.SWIGPendingException.Retrieve();
  }

  public static uint DEFAULT_RENDERING_BACKEND {
    get {
      uint ret = NDalicPINVOKE.DEFAULT_RENDERING_BACKEND_get();
      if (NDalicPINVOKE.SWIGPendingException.Pending) throw NDalicPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static readonly int VISUAL_PROPERTY_TYPE = NDalicPINVOKE.VISUAL_PROPERTY_TYPE_get();
  public static readonly int VISUAL_PROPERTY_SHADER = NDalicPINVOKE.VISUAL_PROPERTY_SHADER_get();

  public static readonly int VERTEX_SHADER = NDalicPINVOKE.VERTEX_SHADER_get();
  public static readonly int FRAGMENT_SHADER = NDalicPINVOKE.FRAGMENT_SHADER_get();
  public static readonly int SUBDIVIDE_GRID_X = NDalicPINVOKE.SUBDIVIDE_GRID_X_get();
  public static readonly int SUBDIVIDE_GRID_Y = NDalicPINVOKE.SUBDIVIDE_GRID_Y_get();
  public static readonly int HINTS = NDalicPINVOKE.HINTS_get();

  public static readonly int COLOR = NDalicPINVOKE.COLOR_get();
  public static readonly int SIZE = NDalicPINVOKE.SIZE_get();
  public static readonly int ANTI_ALIASING = NDalicPINVOKE.ANTI_ALIASING_get();

  public static readonly int MIX_COLOR = NDalicPINVOKE.MIX_COLOR_get();

  public static readonly int START_POSITION = NDalicPINVOKE.START_POSITION_get();
  public static readonly int END_POSITION = NDalicPINVOKE.END_POSITION_get();
  public static readonly int CENTER = NDalicPINVOKE.CENTER_get();
  public static readonly int RADIUS = NDalicPINVOKE.RADIUS_get();
  public static readonly int STOP_OFFSET = NDalicPINVOKE.STOP_OFFSET_get();
  public static readonly int STOP_COLOR = NDalicPINVOKE.STOP_COLOR_get();
  public static readonly int UNITS = NDalicPINVOKE.UNITS_get();
  public static readonly int SPREAD_METHOD = NDalicPINVOKE.SPREAD_METHOD_get();

  public static readonly int IMAGE_VISUAL_URL = NDalicPINVOKE.IMAGE_VISUAL_URL_get();
  public static readonly int IMAGE_VISUAL_FITTING_MODE = NDalicPINVOKE.IMAGE_VISUAL_FITTING_MODE_get();
  public static readonly int IMAGE_VISUAL_SAMPLING_MODE = NDalicPINVOKE.IMAGE_VISUAL_SAMPLING_MODE_get();
  public static readonly int IMAGE_VISUAL_DESIRED_WIDTH = NDalicPINVOKE.IMAGE_VISUAL_DESIRED_WIDTH_get();
  public static readonly int IMAGE_VISUAL_DESIRED_HEIGHT = NDalicPINVOKE.IMAGE_VISUAL_DESIRED_HEIGHT_get();
  public static readonly int IMAGE_VISUAL_SYNCHRONOUS_LOADING = NDalicPINVOKE.IMAGE_VISUAL_SYNCHRONOUS_LOADING_get();
  public static readonly int IMAGE_VISUAL_BORDER_ONLY = NDalicPINVOKE.IMAGE_VISUAL_BORDER_ONLY_get();
  public static readonly int IMAGE_VISUAL_BATCHING_ENABLED = NDalicPINVOKE.IMAGE_VISUAL_BATCHING_ENABLED_get();
  public static readonly int IMAGE_VISUAL_PIXEL_AREA = NDalicPINVOKE.IMAGE_VISUAL_PIXEL_AREA_get();
  public static readonly int IMAGE_VISUAL_WRAP_MODE_U = NDalicPINVOKE.IMAGE_VISUAL_WRAP_MODE_U_get();
  public static readonly int IMAGE_VISUAL_WRAP_MODE_V = NDalicPINVOKE.IMAGE_VISUAL_WRAP_MODE_V_get();

  public static readonly int OBJECT_URL = NDalicPINVOKE.OBJECT_URL_get();
  public static readonly int MATERIAL_URL = NDalicPINVOKE.MATERIAL_URL_get();
  public static readonly int TEXTURES_PATH = NDalicPINVOKE.TEXTURES_PATH_get();
  public static readonly int SHADING_MODE = NDalicPINVOKE.SHADING_MODE_get();
  public static readonly int USE_MIPMAPPING = NDalicPINVOKE.USE_MIPMAPPING_get();
  public static readonly int USE_SOFT_NORMALS = NDalicPINVOKE.USE_SOFT_NORMALS_get();
  public static readonly int LIGHT_POSITION = NDalicPINVOKE.LIGHT_POSITION_get();

  public static readonly int SHAPE = NDalicPINVOKE.SHAPE_get();
  public static readonly int PRIMITIVE_VISUAL_MIX_COLOR = NDalicPINVOKE.PRIMITIVE_VISUAL_MIX_COLOR_get();
  public static readonly int SLICES = NDalicPINVOKE.SLICES_get();
  public static readonly int STACKS = NDalicPINVOKE.STACKS_get();
  public static readonly int SCALE_TOP_RADIUS = NDalicPINVOKE.SCALE_TOP_RADIUS_get();
  public static readonly int SCALE_BOTTOM_RADIUS = NDalicPINVOKE.SCALE_BOTTOM_RADIUS_get();
  public static readonly int SCALE_HEIGHT = NDalicPINVOKE.SCALE_HEIGHT_get();
  public static readonly int SCALE_RADIUS = NDalicPINVOKE.SCALE_RADIUS_get();
  public static readonly int SCALE_DIMENSIONS = NDalicPINVOKE.SCALE_DIMENSIONS_get();
  public static readonly int BEVEL_PERCENTAGE = NDalicPINVOKE.BEVEL_PERCENTAGE_get();
  public static readonly int BEVEL_SMOOTHNESS = NDalicPINVOKE.BEVEL_SMOOTHNESS_get();
  public static readonly int PRIMITIVE_VISUAL_LIGHT_POSITION = NDalicPINVOKE.PRIMITIVE_VISUAL_LIGHT_POSITION_get();

  public static readonly int RENDERING_BACKEND = NDalicPINVOKE.RENDERING_BACKEND_get();
  public static readonly int TEXT = NDalicPINVOKE.TEXT_get();
  public static readonly int FONT_FAMILY = NDalicPINVOKE.FONT_FAMILY_get();
  public static readonly int FONT_STYLE = NDalicPINVOKE.FONT_STYLE_get();
  public static readonly int POINT_SIZE = NDalicPINVOKE.POINT_SIZE_get();
  public static readonly int MULTI_LINE = NDalicPINVOKE.MULTI_LINE_get();
  public static readonly int HORIZONTAL_ALIGNMENT = NDalicPINVOKE.HORIZONTAL_ALIGNMENT_get();
  public static readonly int VERTICAL_ALIGNMENT = NDalicPINVOKE.VERTICAL_ALIGNMENT_get();
  public static readonly int TEXT_COLOR = NDalicPINVOKE.TEXT_COLOR_get();
  public static readonly int ENABLE_MARKUP = NDalicPINVOKE.ENABLE_MARKUP_get();
  public static readonly int ENABLE_AUTO_SCROLL = NDalicPINVOKE.ENABLE_AUTO_SCROLL_get();
  public static readonly int AUTO_SCROLL_SPEED = NDalicPINVOKE.AUTO_SCROLL_SPEED_get();
  public static readonly int AUTO_SCROLL_LOOP_COUNT = NDalicPINVOKE.AUTO_SCROLL_LOOP_COUNT_get();
  public static readonly int AUTO_SCROLL_GAP = NDalicPINVOKE.AUTO_SCROLL_GAP_get();
  public static readonly int LINE_SPACING = NDalicPINVOKE.LINE_SPACING_get();
  public static readonly int UNDERLINE = NDalicPINVOKE.UNDERLINE_get();
  public static readonly int SHADOW = NDalicPINVOKE.SHADOW_get();
  public static readonly int EMBOSS = NDalicPINVOKE.EMBOSS_get();
  public static readonly int OUTLINE = NDalicPINVOKE.OUTLINE_get();
  public static readonly int BATCHING_ENABLED = NDalicPINVOKE.BATCHING_ENABLED_get();

}

}
